CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_name VARCHAR(100),
    credit_hours INTEGER
);
CREATE TABLE enrollments (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER REFERENCES students(student_id),
    course_id INTEGER REFERENCES courses(course_id),
    grade INTEGER
);
INSERT INTO courses (course_name, credit_hours)
VALUES
('Matematika', 4),
('DATABASE', 3),
('Fizika', 4),
('Kimyo', 3),
('Biologiya', 3),
('Adabiyot', 2),
('Geografiya', 3),
('Programming', 5),
('ITS', 3),
('CHQBT', 2);
INSERT INTO enrollments (student_id, course_id, grade)
VALUES
(1, 6, 5), (2, 1, 4), (3, 1, 3),
(1, 2, 5), (4, 2, 4), (5, 2, 3),
(6, 3, 4), (7, 3, 5), (8, 3, 3),
(2, 4, 3), (9, 4, 4), (10, 4, 5),
(3, 5, 5), (1, 5, 4), (2, 5, 3),
(8, 6, 5), (6, 6, 4), (7, 6, 3),
(3, 7, 5), (9, 7, 4), (10, 7, 3),
(1, 8, 5), (4, 8, 4), (5, 8, 3),
(6, 9, 5), (2, 9, 4), (8, 9, 3),
(7, 10, 5), (10, 10, 4), (3, 10, 8);
-- 3.1.1
SELECT first_name, last_name, birthdate FROM students;
--3.1.2
SELECT s.first_name, s.last_name FROM students s
JOIN enrollments e ON s.student_id = e.student_id
JOIN courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Matematika';
--3.1.3
SELECT s.first_name, s.last_name, AVG(e.grade) AS ortacha_bahosi 
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id,s.first_name, s.last_name
HAVING AVG(e.grade) < 4;
--3.2.1
SELECT DISTINCT s.first_name, s.last_name, c.course_name FROM students s
JOIN enrollments e ON s.student_id = e.student_id
JOIN courses c ON e.course_id = c.course_id;
--3.2.2
SELECT first_name, last_name FROM students
WHERE student_id NOT IN (SELECT student_id FROM enrollments);
--3.3.1
SELECT courses.course_name, COUNT(enrollments.student_id)FROM courses
LEFT JOIN enrollments ON courses.course_id = enrollments.course_id 
GROUP BY courses.course_name;
--3.3.2
SELECT courses.course_name FROM courses
JOIN enrollments ON courses.course_id = enrollments.course_id
GROUP BY courses.course_name ORDER BY COUNT(enrollments.student_id) DESC;
--3.4.1
SELECT first_name, last_name
FROM students
ORDER BY last_name;
--Fizika fanini update qilib qo`ydim Tarix ga chunki Tarix yo`q edi
UPDATE courses
SET course_name = 'Tarix'
where course_name='Fizika';
--3.4.2
SELECT students.first_name, students.last_name FROM students
JOIN enrollments ON students.student_id = enrollments.student_id
JOIN courses ON enrollments.course_id = courses.course_id
WHERE students.enrollment_year > 2015-01-01 and courses.course_name = 'Tarix';
--3.5
SELECT  courses.course_name FROM courses JOIN enrollments ON courses.course_id = enrollments.course_id
WHERE enrollments.student_id = (SELECT enrollments.student_id FROM enrollments GROUP BY enrollments.student_id
ORDER BY AVG(enrollments.grade) LIMIT 1);
--3.6.1
UPDATE enrollments
SET grade = 3
WHERE grade = 4;
--3.6.2
DELETE FROM students
WHERE student_id NOT IN (SELECT student_id FROM enrollments);
--3.6.3
INSERT INTO students (first_name, last_name, birthdate)
VALUES ('Kamtarbek', 'Azimjonov', '2000-05-15');
INSERT INTO enrollments (student_id, course_id, grade)
VALUES 
INSERT INTO enrollments (student_id, course_id, grade)
VALUES(
(SELECT student_id FROM students WHERE first_name = 'Samandar' AND last_name = 'Iskandarov'),
    1, 5  ),
(
(SELECT student_id FROM students WHERE first_name = 'Botir' AND last_name = 'Islamboyev'),
2, 4  );
--4. Additional task (optional)
SELECT courses.course_name, ROUND(AVG(enrollments.grade), 2) FROM courses
JOIN enrollments ON courses.course_id = enrollments.course_id GROUP BY courses.course_name ;







